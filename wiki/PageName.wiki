#summary This page describes how to use the Android client side of the Senstastic framework to fit your needs.

= Introduction =

Senstastic is a lightweight framework for passive participatory sensing on Android devices. It allows you to schedule code to run at a specified interval on users' devices. That code will most likely use the device's built-in sensors in some way to generate measurement data. Senstastic can easily augment your measurement data with a geographic location (a latitude, longitude pair), the time, and additional device information. Senstastic will save the measurement data to the device until a WiFi connection becomes available. The device will then push the measurement data to the Senstastic server.

= Getting Started =

Checkout the SenstasticDemo Android project for a working example of a participatory sensing application called "Noise Mapping" built on the Senstastic framework. The easiest way to use the Senstastic client side is to understand the "Noise Mapping" demo and transform it to fit your needs.

= How does the SenstasticDemo begin to work? =

  # When the user's device boots up, the Android OS broadcasts a BOOT_COMPLETED intent.
  # Your BootCompletedReceiver class, defined in BootCompletedReceiver.java, receives the intent in its onReceive method.
  # In the onReceive method, you start up the Senstastic framework by providing it the URL where you would like to send all your sensor measurements, called the endpoint URL. This is usually a script on the Senstastic server. Then, you schedule which custom SensorService(s) you would like Senstastic to periodically execute.

{{{
public class BootCompletedReceiver extends BroadcastReceiver 
{
	public void onReceive(Context context, Intent intent)
	{
        String senstasticEndpointUrl = context.getString(R.string.senstastic_endpoint_url);
        Senstastic.init(senstasticEndpointUrl);
        Senstastic.schedule(context, VolumeSensorService.class);
	}
}
}}}

= What is a SensorService, and why should I make one? =

A SensorService is a short-lived service that you can schedule to run at periodic intervals. You can make your own SensorService(s) by creating a new class that extends SensorService.

You can see an real example of extending SensorService in the VolumeSensorService class in the SenstasticDemo project. When Senstastic periodically invokes the VolumeSensorService, it records a small audio sample, determines the volume of the audio sample, and then passes the volume measurement to the Senstastic framework. The Senstastic framework then attaches additional metadata to the measurement such as the device's current location, the current time, and a Senstastic device id (described later). The Senstastic framework will then push out the measurement and metadata to the Senstastic server immediately if the device has a WiFi connection. Otherwise, Senstastic will save the measurement and metadata to the device's persistent internal memory until WiFi becomes available.

Lets look at an even simpler example of extending SensorService:

{{{

public class SimpleSensorService extends SensorService
{	
	protected String getSensorKind()
	{
		return "SimpleSensor";
	}
	
	protected int getIntervalInSeconds()
	{
		return 3600;
	}
	
	protected void sense()
	{
		int measurement_data = 123;
		finishSensing(data);
	}
}

}}}

This is a fully functioning SensorService! There are three methods you will usually override.

  # getSensorKind() should return the name of your sensor as you wish it to be called. The name of your sensor will be attached to measurements you send to the Senstastic server.
  # getIntervalInSeconds() should return how frequently your SensorService should run. This example will run every hour, or 3,600 seconds.
  # sense() is the entry point of your SensorService. When Senstastic tells your SensorService to run at your specified interval, execution begins here.

## Important notes about sensing ##
  
Senstastic automatically runs your SensorService in its own thread, so any code you write in sense() will not block anything else in your application. When you are done sensing and have obtained your desired measurement, you must pass the measurement data to the Senstastic framework by calling finishSensing(data). This will attach metadata to your measurement, save it to persistent memory or send it to the server, and finally shut down your SensorService until it is invoked again later.

If sense() returns, note that your SensorService and its thread will still be running until you call SensorService's finishSensing(data) method. It is imperitive that you call finishSensing(data) in order to save or send your measurement and stop the SensorService.

The thread your SensorService runs in is a special kind of Android thread called a HandlerThread. This means the thread has a run loop and can support asynchronous operations. Thus, in sense(), you could start an asynchronous operation which finishes with a callback to a custom method you defined in SensorService. That custom method can then call finishSensing(data) to save or send your measurement and shut down the SensorService. Here's a pseudocode example:

{{{

public class PingSensorService extends SensorService, PingReceiver
{	
	protected String getSensorKind()
	{
		return "SimpleSensor";
	}
	
	protected int getIntervalInSeconds()
	{
		return 3600;
	}
	
	protected void sense()
	{
		// pingHost operates asynchronously. When pingHost returns, it will call this SensorService's callback method.
		Ping.pingHost(this);
	}
	
	private void callback(int delayInMilliseconds)
	{
		finishSensing(delayInMilliseconds).
	}
}

}}}

A real example of a class that operates asynchronously (and thus requires a run loop to return its data to) is Android's LocationManager class. Check that out if you want more information, or look at the source code for the SensorService base class, which uses LocationManager (though another class called NetworkLocationRequest) to get the device's GPS coordinates. 

## Adding your SensorService to the Android manifest file ##

After creating a SensorService, you must remember to add it to the Android manifest file! Otherwise, the Android OS will not be able to start it up. Here is the line in AndroidManifest.xml that adds the VolumeSensorService from the SenstasticDemo project:

{{{
		<!-- Add your sensor services here. -->
		<service android:name="VolumeSensorService"></service>
}}}

It's small, but its absolutely necessary! Check out AnroidManifest.xml in SenstasticDemo to see exactly where to declare your SensorService if you're not sure.

= What does the Senstastic client send out to the Senstastic server? =



== How does the Senstastic client get the device's GPS location? =
  
= Modifying the Senstastic Framework =

Senstastic is a lightweight framework, and you are welcome to modify the framework itself to fit your needs. If you do plan to modify the framework, there are few important items we would to point out.

  # Blah...